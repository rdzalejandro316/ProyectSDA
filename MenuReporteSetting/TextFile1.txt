<Window x:Class="SiasoftAppExt.MenuReporteSetting"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"             
             xmlns:local="clr-namespace:SiasoftAppExt"
             Width="900" Height="550" WindowStartupLocation="CenterScreen">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Indigo.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>


    <Grid Name="Main" Visibility="Visible">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="40"/>
                <RowDefinition Height="1*"/>
                <RowDefinition Height="50"/>
            </Grid.RowDefinitions>
            
			<Grid Grid.Row="0">
                <Grid Background="#373737">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="50"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="50"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="50"/>
                    </Grid.ColumnDefinitions>

                    <TextBlock Text="Items Menu:" Grid.Column="0" Margin="10 0 0 0" Foreground="White" FontWeight="Bold" FontSize="14" VerticalAlignment="Center"/>
                    <TextBlock Text="Sub Item Menu:" Grid.Column="2" Margin="10 0 0 0" Foreground="White" FontWeight="Bold" FontSize="14" VerticalAlignment="Center"/>
                    <TextBlock Text="Child Sub item Menu:" Grid.Column="4" Margin="10 0 0 0" Foreground="White" FontWeight="Bold" FontSize="14" VerticalAlignment="Center"/>

                    <Grid Grid.ColumnSpan="6" Name="GridToogle">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="100"/>
                            <ColumnDefinition Width="50"/>
                            <ColumnDefinition Width="120"/>
                            <ColumnDefinition Width="50"/>
                            <ColumnDefinition Width="150"/>
                            <ColumnDefinition Width="50"/>
                        </Grid.ColumnDefinitions>

                        <ToggleButton x:Name="Togle1" Grid.Column="1" Style="{StaticResource MaterialDesignSwitchDarkToggleButton}" Margin="5 0 5 0" Cursor="Hand" Checked="ToggleButton_Checked" Unchecked="ToggleButton_Unchecked"/>
                        <ToggleButton x:Name="Togle2" Grid.Column="3" Style="{StaticResource MaterialDesignSwitchDarkToggleButton}" Margin="5 0 5 0" Cursor="Hand" Checked="ToggleButton_Checked" Unchecked="ToggleButton_Unchecked"/>
                        <ToggleButton x:Name="Togle3" Grid.Column="5" Style="{StaticResource MaterialDesignSwitchDarkToggleButton}" Margin="5 0 5 0" Cursor="Hand" Checked="ToggleButton_Checked" Unchecked="ToggleButton_Unchecked"/>
                    </Grid>
                </Grid>
            </Grid>

            <Grid Grid.Row="1" Margin="5">
                <Border Grid.Row="1" Background="white" Height="Auto"  BorderBrush="Silver" BorderThickness="1,1,1,1"  Margin="5 5 5 0">
                    <DataGrid Name="GridItem" AutoGenerateColumns="False" Grid.Row="1" CanUserSortColumns="True"  CanUserAddRows="False"  materialDesign:DataGridAssist.CellPadding="4 2 2 2"  materialDesign:DataGridAssist.ColumnHeaderPadding="4 2 2 2" SelectionMode="Single" SelectionUnit="FullRow" IsReadOnly="True" BorderBrush="{x:Null}">
                        <DataGrid.Columns>
                            <DataGridTextColumn x:Name="column1" Header="ID PARENT" Binding="{Binding idrowparent}" Visibility="Visible"/>
                            <DataGridTextColumn x:Name="column2" Header="PARENT NODE" Binding="{Binding name_itemparent}"/>
                            <DataGridTextColumn x:Name="column3" Header="ID ITEM" Binding="{Binding idrowchild}" Visibility="Visible"/>
                            <DataGridTextColumn x:Name="column4" Header="CHILD NAME" Binding="{Binding name_itemchild}"/>
                            <DataGridTextColumn x:Name="column5" Header="ITEM NAME" Binding="{Binding id_Screen}" Visibility="Visible"/>
                            <DataGridTextColumn x:Name="column6" Header="id_parm" Binding="{Binding id_parm}" Visibility="Visible"/>
                            <DataGridTextColumn x:Name="column7" Header="reporte" Binding="{Binding reporte}" Visibility="Visible"/>
                            <DataGridTextColumn x:Name="column8" Header="typePnt" Binding="{Binding typePnt}" Visibility="Visible"/>
                            <DataGridTextColumn x:Name="column9" Header="idserver" Binding="{Binding idserver}" Visibility="Visible"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Border>
            </Grid>
            <Grid Grid.Row="2">
                <Border  Background="#373737" BorderBrush="Silver" BorderThickness="1,1,1,1" >
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <Button Name="BtnAdd" Content="Add Item" Style="{StaticResource MaterialDesignRaisedDarkButton}" Margin="10 0 10 0" Click="BtnAdd_Click"/>
                        <Button Name="BtnEdit" Content="Edit Item" Style="{StaticResource MaterialDesignRaisedDarkButton}" Margin="10 0 10 0" Click="BtnEdit_Click"/>
                        <Button Name="BtnDelete" Content="Delete Item" Style="{StaticResource MaterialDesignRaisedDarkButton}" Margin="10 0 10 0" Click="BtnDelete_Click"/>
                    </StackPanel>
                </Border>
            </Grid>
        </Grid>
    </Grid>


</Window>

    
    
    
	  //private void ToggleButton_Checked(object sender, RoutedEventArgs e)
        //{
        //    try
        //    {
        //        string Name = ((ToggleButton)sender).Name.ToString().Trim();
        //        foreach (ToggleButton item in GridToogle.Children)
        //        {
        //            if (item.Name != Name) item.IsChecked = false;
        //        }

        //        getDatagridItem(Name);
        //    }
        //    catch (Exception W)
        //    {
        //        MessageBox.Show("NADA:" + W);
        //    }

        //}

        //private void ToggleButton_Unchecked(object sender, RoutedEventArgs e)
        //{
        //    if (Togle1.IsChecked == false && Togle2.IsChecked == false && Togle3.IsChecked == false) GridItem.ItemsSource = null;
        //}

        //public void getDatagridItem(string nameToogle)
        //{
        //    string select = "";
        //    if (nameToogle == "Togle1")
        //    {
        //        select = "select Menu_Reports.idrow as idrowparent,Menu_Reports.name_item as name_itemparent,id_Screen,type_item,id_parm,reporte,typePnt,idserver ";
        //        select += "from Menu_Reports ";
        //        select += "where type_item='1' ";
        //        column4.Visibility = Visibility.Hidden;
        //    }

        //    if (nameToogle == "Togle3" || nameToogle == "Togle2")
        //    {
        //        string tipo = nameToogle == "Togle2" ? "1" : "2";    
        //        select = "select Menu_Reports.idrow as idrowparent,Menu_Reports.name_item as name_itemparent,Menu_Reports.id_Screen,Menu_Reports.type_item,Menu_Reports.id_parm,Menu_Reports.reporte,Menu_Reports.typePnt,Menu_Reports.idserver, ";
        //        select += "menu.idrow as idrowchild,menu.name_item as name_itemchild,Menu_Reports.id_Screen  from Menu_Reports ";
        //        select += "inner join Menu_Reports as menu on Menu_Reports.idrow = menu.cod_itemp ";
        //        select += "where Menu_Reports.type_item='"+tipo+"';";
        //        column4.Visibility = Visibility.Visible;
        //    }

        //    DataTable dt = SiaWin.Func.SqlDT(select, "Existencia", 0);
        //    GridItem.ItemsSource = dt.DefaultView;
        //}
        //void ActualizarEventhandler(object sender, RoutedEventArgs e)
        //{
        //    getDatagridItem(nameToogle());
        //}

        //Form formulario;
        //private void BtnAdd_Click(object sender, RoutedEventArgs e)
        //{
        //    var verificacion = IsCheck();
        //    if (verificacion.check == false)
        //    {
        //        MessageBox.Show("Selecciona un item para agregar");
        //        return;
        //    }

        //    formulario = new Form();
        //    formulario.tipo = verificacion.itemToogle;
        //    formulario.edit = false;            
        //    formulario.BTN_form.Content = "Guardar";
        //    formulario.ActualizarParentEventHandler += new RoutedEventHandler(ActualizarEventhandler);
        //    formulario.panelForm.Visibility = Visibility.Visible;
        //    Main.Children.Add(formulario);
        //}

        //private void BtnEdit_Click(object sender, RoutedEventArgs e)
        //{
        //    var verificacion = IsCheck();
        //    if (verificacion.check == false)
        //    {
        //        MessageBox.Show("Selecciona un item para agregar");
        //        return;
        //    }


        //    if (GridItem.SelectedIndex >= 0)
        //    {
        //        DataRowView row = (DataRowView)GridItem.SelectedItems[0];
        //        //string id = row["idrowparent"].ToString().Trim();

        //        Form formulario = new Form();

        //        formulario.edit = true;
        //        formulario.tipo = verificacion.itemToogle;
        //        formulario.BTN_form.Content = "Modificar";
        //        formulario.panelForm.Visibility = Visibility.Visible;
        //        formulario.TX_nameitem.Text = row["name_itemchild"].ToString().Trim();
        //        formulario.TX_idscreen.Text = row["id_Screen"].ToString().Trim();
        //        formulario.server = Convert.ToInt32(row["idserver"]);
        //        formulario.ParentIdRow = Convert.ToInt32(row["idrowparent"]);
        //        Main.Children.Add(formulario);
        //    }
        //    else
        //    {
        //        MessageBox.Show("Selecciona un item de la grilla para poder editar");
        //    }

        //}

        //public ValuesReturn IsCheck()
        //{
        //    ValuesReturn valores;
        //    valores.check = false;
        //    valores.itemToogle = "ninguno";

        //    foreach (ToggleButton item in GridToogle.Children)
        //    {
        //        if (item.IsChecked == true)
        //        {
        //            valores.check = true;
        //            valores.itemToogle = item.Name;
        //            break;
        //        }
        //    }

        //    return valores;
        //}


        //public struct ValuesReturn
        //{
        //    public bool check;
        //    public string itemToogle;
        //}

        //private void BtnDelete_Click(object sender, RoutedEventArgs e)
        //{
        //    try
        //    {
        //        var verificacion = IsCheck();
        //        if (verificacion.check == false)
        //        {
        //            MessageBox.Show("Selecciona un item para eliminar");
        //            return;
        //        }

        //        if (GridItem.SelectedIndex >= 0)
        //        {
        //            DataRowView row = (DataRowView)GridItem.SelectedItems[0];                    
        //            string item = row["name_itemparent"].ToString().Trim();

        //            if (MessageBox.Show("Usted desea eliminar el item:" + item + "?", "Guardar Traslado", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
        //            {
        //                string delete = "";

        //                if (column4.Visibility == Visibility.Visible)
        //                {
        //                    string idChild = row["idrowchild"].ToString().Trim();
        //                    delete = "delete Menu_Reports where idrow=" + idChild + ";hijo";
        //                }
        //                else
        //                {
        //                    string idParent = row["idrowparent"].ToString().Trim();
        //                    delete = "delete Menu_Reports where idrow=" + idParent + ";padre";
        //                }

        //                MessageBox.Show(delete);
        //                //if (SiaWin.Func.SqlCRUD(delete, 0) == true)
        //                //{
        //                //    MessageBox.Show("Eliminacion exitosa del item:" + item);
        //                //    getDatagridItem(nameToogle());
        //                //}
        //            }
        //        }


        //    }
        //    catch (Exception w)
        //    {
        //        MessageBox.Show("erro al eliminar:" + w);
        //    }
        //}


        //public string nameToogle()
        //{
        //    string nameItem = "";
        //    foreach (ToggleButton item in GridToogle.Children)
        //    {
        //        if (item.IsChecked == true) nameItem = item.Name;
        //    }
        //    return nameItem.Trim();
        //}